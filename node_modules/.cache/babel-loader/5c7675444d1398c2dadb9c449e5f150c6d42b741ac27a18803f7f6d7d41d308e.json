{"ast":null,"code":"var _jsxFileName = \"/Users/yoonjinwon/Desktop/\\u110B\\u1175\\u1104\\u1162\\u110B\\u1165\\u1104\\u1162/IDDAE-jinwon/final/src/components/TimeSlotList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport { PossibleSlot, ImpossibleSlot } from \"./TimeSlot\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TimeSlotList = ({\n  timeList,\n  meetingDateList,\n  setMeetingDateList\n}) => {\n  _s();\n  const isSameDateAndTime = (date1, date2) => {\n    return date1.getTime() === date2.getTime();\n  };\n  const handleClickPossible = e => {\n    const date = e.target.time; // new Date(e.target.time)\n    const copyMeetingList = [...meetingDateList];\n    for (let i = 0; i < copyMeetingList.length; i++) {\n      if (isSameDateAndTime(copyMeetingList[i].time, date)) {\n        const meetList = copyMeetingList.splice(i, 1);\n        setMeetingDateList(meetList);\n        return;\n      }\n    }\n  };\n  const handleClickImpossible = e => {\n    const date = e.target.value; // new Date(e.target.time)\n    // const copyMeetingList = [...meetingDateList];\n    // const meetList = copyMeetingList.push(date);\n    // meetList.sort();\n    setMeetingDateList(prev => {\n      prev.push(date);\n      prev.sort();\n      return prev;\n    });\n    return;\n  };\n  useEffect(() => console.log(meetingDateList));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: timeList.map((slot, index) => {\n      if (slot.isPossible) {\n        return /*#__PURE__*/_jsxDEV(PossibleSlot, {\n          onClick: handleClickPossible,\n          time: slot.time\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 18\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(ImpossibleSlot, {\n          onClick: handleClickImpossible,\n          time: slot.time\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 25\n        }, this);\n      }\n    })\n  }, void 0, false);\n};\n_s(TimeSlotList, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = TimeSlotList;\nexport default TimeSlotList;\nvar _c;\n$RefreshReg$(_c, \"TimeSlotList\");","map":{"version":3,"names":["React","useEffect","PossibleSlot","ImpossibleSlot","jsxDEV","_jsxDEV","Fragment","_Fragment","TimeSlotList","timeList","meetingDateList","setMeetingDateList","_s","isSameDateAndTime","date1","date2","getTime","handleClickPossible","e","date","target","time","copyMeetingList","i","length","meetList","splice","handleClickImpossible","value","prev","push","sort","console","log","children","map","slot","index","isPossible","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/yoonjinwon/Desktop/이때어때/IDDAE-jinwon/final/src/components/TimeSlotList.jsx"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport {PossibleSlot, ImpossibleSlot} from \"./TimeSlot\";\n\nconst TimeSlotList = ({ timeList, meetingDateList, setMeetingDateList }) => {\n  const isSameDateAndTime = (date1, date2) => {\n    return date1.getTime() === date2.getTime();\n  }\n  const handleClickPossible = (e) => {\n    const date = e.target.time; // new Date(e.target.time)\n    const copyMeetingList = [...meetingDateList];\n    for(let i = 0; i < copyMeetingList.length; i++) {\n      if(isSameDateAndTime(copyMeetingList[i].time, date)) {\n        const meetList = copyMeetingList.splice(i, 1);\n        setMeetingDateList(meetList);\n        return;\n      }\n    }\n  };\n  const handleClickImpossible = (e) => {\n    const date = e.target.value; // new Date(e.target.time)\n    // const copyMeetingList = [...meetingDateList];\n    // const meetList = copyMeetingList.push(date);\n    // meetList.sort();\n    setMeetingDateList((prev) => {\n      prev.push(date)\n      prev.sort()\n      return prev;\n    });\n    return;\n  };\n  useEffect(()=>(\n    console.log(meetingDateList)\n  ))\n\n  return (\n    <>\n      {timeList.map((slot, index) => {\n        if (slot.isPossible) {\n          return <PossibleSlot onClick={handleClickPossible} key={index} time={slot.time} />;\n        } else { return <ImpossibleSlot onClick={handleClickImpossible} key={index} time={slot.time} />; }\n      })}\n    </>\n  );\n};\n\nexport default TimeSlotList;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAAQC,YAAY,EAAEC,cAAc,QAAO,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAExD,MAAMC,YAAY,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,eAAe;EAAEC;AAAmB,CAAC,KAAK;EAAAC,EAAA;EAC1E,MAAMC,iBAAiB,GAAGA,CAACC,KAAK,EAAEC,KAAK,KAAK;IAC1C,OAAOD,KAAK,CAACE,OAAO,CAAC,CAAC,KAAKD,KAAK,CAACC,OAAO,CAAC,CAAC;EAC5C,CAAC;EACD,MAAMC,mBAAmB,GAAIC,CAAC,IAAK;IACjC,MAAMC,IAAI,GAAGD,CAAC,CAACE,MAAM,CAACC,IAAI,CAAC,CAAC;IAC5B,MAAMC,eAAe,GAAG,CAAC,GAAGZ,eAAe,CAAC;IAC5C,KAAI,IAAIa,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,eAAe,CAACE,MAAM,EAAED,CAAC,EAAE,EAAE;MAC9C,IAAGV,iBAAiB,CAACS,eAAe,CAACC,CAAC,CAAC,CAACF,IAAI,EAAEF,IAAI,CAAC,EAAE;QACnD,MAAMM,QAAQ,GAAGH,eAAe,CAACI,MAAM,CAACH,CAAC,EAAE,CAAC,CAAC;QAC7CZ,kBAAkB,CAACc,QAAQ,CAAC;QAC5B;MACF;IACF;EACF,CAAC;EACD,MAAME,qBAAqB,GAAIT,CAAC,IAAK;IACnC,MAAMC,IAAI,GAAGD,CAAC,CAACE,MAAM,CAACQ,KAAK,CAAC,CAAC;IAC7B;IACA;IACA;IACAjB,kBAAkB,CAAEkB,IAAI,IAAK;MAC3BA,IAAI,CAACC,IAAI,CAACX,IAAI,CAAC;MACfU,IAAI,CAACE,IAAI,CAAC,CAAC;MACX,OAAOF,IAAI;IACb,CAAC,CAAC;IACF;EACF,CAAC;EACD5B,SAAS,CAAC,MACR+B,OAAO,CAACC,GAAG,CAACvB,eAAe,CAC5B,CAAC;EAEF,oBACEL,OAAA,CAAAE,SAAA;IAAA2B,QAAA,EACGzB,QAAQ,CAAC0B,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;MAC7B,IAAID,IAAI,CAACE,UAAU,EAAE;QACnB,oBAAOjC,OAAA,CAACH,YAAY;UAACqC,OAAO,EAAEtB,mBAAoB;UAAaI,IAAI,EAAEe,IAAI,CAACf;QAAK,GAAvBgB,KAAK;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAoB,CAAC;MACpF,CAAC,MAAM;QAAE,oBAAOtC,OAAA,CAACF,cAAc;UAACoC,OAAO,EAAEZ,qBAAsB;UAAaN,IAAI,EAAEe,IAAI,CAACf;QAAK,GAAvBgB,KAAK;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAoB,CAAC;MAAE;IACnG,CAAC;EAAC,gBACF,CAAC;AAEP,CAAC;AAAC/B,EAAA,CAxCIJ,YAAY;AAAAoC,EAAA,GAAZpC,YAAY;AA0ClB,eAAeA,YAAY;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}